# -*- coding: utf-8 -*-
"""TCS교통량수집.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tChksEWko6HQAwHxvv2ehe7ti3_Vy27s

8440600649 key


http://data.ex.co.kr/openapi/trafficapi/nationalTrafficVolumn
?key=8440600649&type=json&sumDate=20220517
"""
import requests
import json
import pandas as pd
from datetime import date, timedelta
import time


class tcsapi:
  def __init__(self):
    self.__url = "http://data.ex.co.kr/openapi/trafficapi/nationalTrafficVolumn"
    self.__rtype = "json"
    self.__rkey = "8440600649"
    self.__headers = {'Content-Type': 'application/json', 'charset': 'UTF-8', 'Accept': '*/*'}

  def daterange(self, start_date, end_date):
      for n in range(int((end_date - start_date).days)):
          yield start_date + timedelta(n)

  def dateGenerator(self, from_date, to_date):
    start_date = date(int(from_date[0:4]), int(from_date[4:6]), int(from_date[6:]))
    end_date = date(int(to_date[0:4]), int(to_date[4:6]), int(to_date[6:]))
    result = []
    for single_date in self.daterange(start_date, end_date):
      result.append(single_date.strftime("%Y%m%d"))
    return result

  def getDataFrame(self, from_date, to_date):
    req_dates = self.dateGenerator(from_date, to_date)
    df_result = pd.DataFrame(columns=['Date', 'SUM'])
    for req_d in req_dates:
      rdate = str(req_d)
      params = {'key':self.__rkey, 'type':self.__rtype, 'sumDate':rdate}
      res = requests.get(self.__url, headers=self.__headers, params=params)
      if res.status_code == 200:
        data = eval(res.text)
        df_temp = pd.DataFrame(data['list'])
        df_result = df_result.append({"Date":req_d, 'SUM': df_temp['trafficVolumn'].astype(int).sum()}, ignore_index = True)
      else:
        print(res.status_code)
      time.sleep(1)
    return df_result

# df_result = getDataFrame("20220523", "20220527")
# df_result

